class Program
{
    // 여러 타입을 받는 함수 만들기
    // 기본
    /*class MyIntList
    {
        int[] arr = new int[10];
    }

    class MyShortList
    {
        short[] arr = new short[10];
    }
    class MyFloatList
    {
        float[] arr = new float[10];
    }

    class MyMonsterList
    {
        Monster[] arr = new Monster[10];
    }*/

    // 해결방법 1. (좋지 않음)
    class MyList
    {
        object[] arr = new object[10];
    }

    // 해결방법 2. (좋음) // 클래스의 일반화
    class MyList<T> // 인자가 여러개면 <T, K> 이런 형식으로 작성 // C#의 경우 조건을 걸어줄 수 있음 #조건 참고
    {
        T[] arr = new T[10];

        public T GetItem(int i)
        {
            return arr[i];
        }
    }

    /*
    class MyList<T> where T : struct // 어떠한 형식이든 상관없지만 T는 값 형식이여야 한다.
    class MyList<T> where T : class // 어떠한 형식이든 상관없지만 T는 참조 형식이여야 한다.
    class MyList<T> where T : new() // 어떠한 인자도 받지않는 생성자가 있어야 한다.
    class MyList<T> where T : Monster // T는 Monster 혹은 Monster를 상속받은 클래스여야 한다.
     */

    class Monster
    {

    }

    // 함수의 일반화
    static void Test<T>(T input)
    {

    }

    static void Main(string[] args)
    {
        // 기본이 비효율적이라 타입을 하나로 묶어줄 필요가 있음
        /*// -> object 타입
        object obj = 3;
        object obj2 = "hello world";

        int num = (int)obj;
        string str = (string)obj2;

        // 그럼 var과 차이점이 무엇이냐
        // var은 원래 타입을 알아서 찾아감, object는 object타입임, object타입은 캐스팅을 한번 거쳐야해서 연산이 비효율적임
        var v = 3;
        var v2 = "hello world";

        int num2 = v;
        string str2 = v2;*/

        MyList<int> myIntList = new MyList<int>();
        int item = myIntList.GetItem(0);

        MyList<short> myShortList = new MyList<short>();
        MyList<Monster> myMonsterList = new MyList<Monster>();

        Test<int>(3);
        Test<float>(3.0f);
    }
}