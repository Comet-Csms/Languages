using System;

namespace CSharp
{
    class Program
    {
        abstract class Monster
        {
            public abstract void Shout(); // 형식만 지정, 메소드를 작성하면 오류.
        }

        interface IFlyable // 관례적으로 인터페이스는 맨앞에 대문자 I를 붙여 이름을 지음.
        {
            public void Fly();
        }

        class Orc : Monster
        {
            public override void Shout()
            {
                Console.WriteLine("오크!");
            }
        }

        class FlyableOrc : Orc, IFlyable // 클래스는 다중상속 불가능, 하지만 인터페이스는 다중상속 가능
        {
            public void Fly() // 인터페이스를 상속하면 반드시 상속받은 인터페이스 안의 메소드 작성 해줘야 함
            {

            }
        }

        static void DoFly(IFlyable flyable)
        {
            flyable.Fly(); // 가능
        }

        static void Main(string[] args)
        {
            // 추상화 클래스로 지정하면 그 클래스로는 인스턴스 생성 불가
            IFlyable flyable = new FlyableOrc();
            flyable.Fly(); // 가능
            flyable.Shout(); // 불가능 // 업캐스팅, 다운캐스팅때 학습한 개념과 비슷

            FlyableOrc flyableorc = new FlyableOrc();
            flyableorc.Fly(); // 가능
            flyableorc.Shout(); // 가능

            DoFly(flyable); // 가능
            DoFly(flyableorc); // 가능
        }
    }
}