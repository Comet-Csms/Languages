using System;

namespace CSharp
{
    // Ref 참조
    class Knight
    {
        public int hp;
        public int attack;

        public Knight Clone()
        {
            Knight knight = new Knight();
            knight.hp = hp;
            knight.attack = attack;
            return knight;
        }

        public void Move()
        {
            Console.WriteLine("Knight Move");
        }

        public void Attack()
        {
            Console.WriteLine("Knight Attack");
        }
    }

    // 복사
    struct Mage
    {
        public int hp;
        public int attack;
    }

    class Program
    {
        static void KillMage(Mage mage)
        {
            mage.hp = 0;
        }

        static void KillKnight(Knight knight)
        {
            knight.hp = 0;
        }

        static void Main(string[] args)
        {
            Mage mage;
            mage.hp = 100;
            mage.attack = 50;

            // 값 복사, 즉, 다른 객체
            Mage mage2 = mage;
            mage2.hp = 0;

            Console.WriteLine($"mage HP : {mage.hp}, mage2 HP : {mage2.hp}"); // mage HP : 100, mage2 HP : 0

            Knight knight = new Knight();
            knight.hp = 100;
            knight.attack = 10;

            // 같은 개체 참조
            Knight knight2 = knight;
            knight.hp = 0;

            Console.WriteLine($"knight HP : {knight.hp}, knight2 HP : {knight2.hp}"); // knight HP : 0, knight2 HP : 0

            // class로 생성한 Knight를 값만 복사해서 서로 다른 객체를 만들고 싶다면
            // 1번 방법
            Knight knight3 = new Knight();
            knight3.hp = knight.hp;
            knight3.attack = knight.attack;

            // 2번 방법
            Knight knight4 = knight.Clone();

            /*
            KillMage(mage);
            KillKnight(knight);
            Console.WriteLine($"Mage HP : {mage.hp}, Knight HP : {knight.hp}"); // Mage HP : 100, Knight HP : 0
            */
        }
    }
}